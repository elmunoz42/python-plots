# -*- coding: utf-8 -*-
"""colab_activity15_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uC_1G-GAh8ws_0BOdDHgnGXucdHcjZpl

### Colab Activity 15.1: Introduction to Gradient Descent

**Expected Time = 60 minutes**


This activity introduces the iterative procedure to use the derivative in finding maximum or minimum values of a function.  To begin, you will use a numeric approximation for the derivative (slope of tangent line) and write the equation for this line.  Then, you will use this line to approximate a value of the function a short distance from the point of tangency.  In the next assignment, you will repeatedly apply this operation using gradient descent to locate the minimum value of a function.

#### Index

- [Problem 1](#-Problem-1)
- [Problem 2](#-Problem-2)
- [Problem 3](#-Problem-3)
- [Problem 4](#-Problem-4)
- [Problem 5](#-Problem-5)
"""

import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt

from scipy.optimize import minimize

"""[Back to top](#-Index)

### Problem 1

#### Examining the Function

To begin, define a function $f(x) = x^2$ and a domain $x = [-2, 2]$ with 100 points. Assign the domain to the variable `x`. Plot the function and identify whether a maximum or minimum value exists.

HINT: To define a domain, use numpy's `linspace`.

"""

# np.linspace?

def f(x):
  return x**2

x = np.linspace(-2,2,100)


# Answer check
plt.plot(x, f(x), label = 'f')
plt.legend();

"""[Back to top](#-Index)

### Problem 2

#### Approximating the derivative


The definition of the derivative $f'$ of a function $f$ is:

$$f'(x) =  \lim_{h \to 0} \frac{f(x + h) - f(x)}{h}$$

Using this definition to substitute a small value for $h$ in the difference quotient we have:

$$\frac{f(x + 0.0001) - f(x)}{0.0001}$$

In the code cell below, define a function `df` below that takes in a value `x` and returns the value of the derivative of $f$ along $x$.
"""

def df(x):
    return (f(x + 0.0001) - f(x))/0.0001
x = np.linspace(-2,2,100)


# Answer check
plt.plot(x, f(x), label = 'f')
plt.plot(x, df(x), label = 'df')
plt.ylim(-1, 4)
plt.axhline(color = 'black')
plt.legend();

"""[Back to top](#-Index)

### Problem 3

#### Slope of tangent at $x = 1$



Use the function $f(x) = x^2$ and $f'(x)$ to determine the slope of the tangent line (the value of the derivative) at $x = 1$.  Assign this as a float to `m` below.
"""

y = f(1)
m = df(1)


# Answer check
print(f'The slope of the tangent line at x = 1 is {m: .2f}')

"""[Back to top](#-Index)

### Problem 4

#### Equation of tangent line at $x = 1$



Now, you can use the slope found in problem 3 and the point (1, 1) to write an equation for the tangent line.  Define a function `l` below that represents this line.  Recall the point-slope form for a line is given by:

$$y = m(x - x_0) + y_0$$

where $m = \text{slope}$ and $(x_0, y_0) = (x, f(x))$ = (1,1).
"""

x0 = 1
y0 = 1
def l(x):
    return m*(x - x0) + y0


# # Answer check
plt.plot(x, f(x), label = 'f')
plt.plot(x, l(x), label = 'l')
plt.plot(1, 1, 'ro')
plt.ylim(-1, 4)
plt.axhline(color = 'black')
plt.legend();

"""[Back to top](#-Index)

### Problem 5

#### Use tangent line to approximate $x = 0.9$



Now, use the equation of the tangent line to approximate the value of $f(x)$ at $x = 0.9$.  Compute the absolute difference between this value and the actual value of $f(0.9)$.  Assign the absolute difference between these to `error` below.
"""

x1 = 0.9
f_prev = f(x1)
f_next = l(x1)
error = abs(f_next - f_prev)



# # Answer check
plt.plot(x, f(x), label = 'f')
plt.plot(x, l(x), label = 'l')
plt.plot(1, 1, 'ro', label = 'starting point')
plt.plot(0.9, l(0.9), 'bo', label = 'tan line approximation')
plt.ylim(0.75, 1.05)
plt.xlim(0.88, 1.01)
plt.axhline(color = 'black')
plt.legend(frameon = False);

